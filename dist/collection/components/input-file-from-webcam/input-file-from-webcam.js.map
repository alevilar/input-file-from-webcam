{"version":3,"file":"input-file-from-webcam.js","sourceRoot":"","sources":["../../../src/components/input-file-from-webcam/input-file-from-webcam.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAgB,MAAM,eAAe,CAAC;AAC9F,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AAS5C,MAAM,OAAO,mBAAmB;;iBAML,GAAG;kBACF,GAAG;sBAKsC,MAAM;uBAUxC,IAAI;;EAGrC,KAAK,CAAC,OAAO;IACX,gBAAgB;IAChB,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,OAAO,EAAE,CAAA;IAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,OAAO,GAAG,CAAA;EACZ,CAAC;EAGD,KAAK,CAAC,YAAY;IAChB,IAAI,CAAC,kBAAkB,EAAE,CAAA;EAC3B,CAAC;EAoBD,cAAc;IACZ,IAAI,CAAC,kBAAkB,EAAE,CAAA;EAC3B,CAAC;EAID;;;KAGG;EACK,kBAAkB;IACxB,+CAA+C;IAC/C,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,aAAa,CAAA;IACtE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAE,IAAI,CAAC,UAAU,CAAI,CAAA;EAClD,CAAC;EAED,oCAAoC;IAClC,OAAO,EAAC,KAAK,EAAE,IAAI,CAAC,UAAU,EAAC,CAAA;EACjC,CAAC;EAGD,kBAAkB;EAGlB,CAAC;EAED,KAAK,CAAC,kBAAkB;IACtB,MAAM,CAAC,UAAU,CAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,oCAAoC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAE,CAAC;EAClH,CAAC;EAED,KAAK,CAAC,oBAAoB;IACxB,MAAM,CAAC,WAAW,EAAE,CAAA;EACtB,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MAEH,YAAM,IAAI,EAAC,QAAQ,GAAQ;MAC3B,aAAO,QAAQ,EAAC,MAAM,EAAC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,GAAW;MAChE,cAAQ,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAE,EAAG,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,GAAW;MAE3F,eAAa;MAEb,YAAM,IAAI,EAAC,OAAO,GAAQ,CACrB,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAEF","sourcesContent":["import { Component, Host, h, Method, Listen, Prop, Event, EventEmitter } from '@stencil/core';\nimport { camera } from '../../utils/camera';\n\nexport type cameratipes = \"user\"|\"environment\"\n\n@Component({\n  tag: 'input-file-from-webcam',\n  styleUrl: 'input-file-from-webcam.css',\n  shadow: true,\n})\nexport class InputFileFromWebcam {\n\n  private elVideo: HTMLVideoElement\n  private elCanvas: HTMLCanvasElement\n\n\n  @Prop() width?: number = 460\n  @Prop() height?: number = 460\n\n  /**\n   * FacingModel optiones following https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints/facingMode#value\n   */\n  @Prop({ mutable: true, reflect: true }) facingMode?: cameratipes = \"user\"\n\n  /**\n   * you can pass a function and override the canvas.drawImage function so you\n   * can change the image adding filters or any kind of magin in your image\n   * \n   * you just need to crear a function with all canvas.-drawImage arguments\n   * \n   * here you have the list of vars you get: videoElement, left, top, imgSize, imgSize, 0,0, canvas.width, canvas.height\n   */\n  @Prop() drawImageCb?: Function = null\n\n  @Method()\n  async takePic(): Promise<File> {\n    // show a prompt\n    const pic = await camera.takePic()\n    this.pictureTaken.emit(pic);\n    return pic\n  }\n\n  @Method()\n  async toggleCamera(): Promise<void>{\n    this.__toogleFacingMode()\n  }\n\n\n  @Event({\n    eventName: 'pictureTaken',\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  }) pictureTaken: EventEmitter<File>;\n\n  @Event({\n    eventName: 'facingModeChanged',\n    composed: true,\n    cancelable: false,\n    bubbles: true,\n  }) facingModeChanged: EventEmitter<cameratipes>;\n\n\n\n  @Listen('click')\n  onClickHandler() {\n    this.__toogleFacingMode()\n  }\n\n \n\n  /**\n   * Toogle webcam, for example in mobile show front or back camera\n   * you can block this behaviour by setting the facingMode Property\n   */\n  private __toogleFacingMode() {\n    // only change if no facinMode property was set\n    this.facingMode = (this.facingMode != \"user\") ? \"user\" : \"environment\"\n    this.facingModeChanged.emit( this.facingMode   )\n  }\n\n  __createfacingModeConstrainDOMString(): ConstrainDOMString {\n    return {ideal: this.facingMode}\n  }\n\n\n  componentWillMount() {\n   \n\n  }\n  \n  async componentDidRender() {\n    camera.initCamera( this.elVideo, this.elCanvas, this.__createfacingModeConstrainDOMString(), this.drawImageCb );\n  }\n\n  async disconnectedCallback() {\n    camera.resetCamera()\n  }\n\n  render() {\n    return (\n      <Host>\n\n        <slot name='before'></slot>\n        <video autoplay=\"true\" ref={(el) => this.elVideo = el }></video>\n        <canvas ref={(el) => this.elCanvas = el } width={this.width} height={this.height}></canvas>\n        \n        <slot></slot>\n\n        <slot name='after'></slot>\n      </Host>\n    );\n  }\n\n}\n"]}